var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"signed_distance_functions/#Signed-distance-functions","page":"Signed distance functions","title":"Signed distance functions","text":"","category":"section"},{"location":"signed_distance_functions/","page":"Signed distance functions","title":"Signed distance functions","text":"Modules=[SimpleDistMesh.sdf]\nOrder=[:type, :function]","category":"page"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.Circle","page":"Signed distance functions","title":"SimpleDistMesh.sdf.Circle","text":"Circle(p0, r)\n\nSigned distance function for a circle with center p0 and radius r\n\n\n\n\n\n","category":"type"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.Polygon","page":"Signed distance functions","title":"SimpleDistMesh.sdf.Polygon","text":"Polygon(nodes)\n\nSigned distance function for a polygon with 2-dimensional nodes as columns of a matrix\n\nExamples\n\nCreate signed distance function for a triangle\n\njulia> tri = Polygon([0 1 0; 0 0 1])\n(::Polygon) (generic function with 1 method)\n\n\n\n\n\n","category":"type"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.Rect","page":"Signed distance functions","title":"SimpleDistMesh.sdf.Rect","text":"Rect(x1, x2, y1, y2)\n\nSigned distance function for a rectangle [x1, x2] × [y1, y2]\n\n\n\n\n\n","category":"type"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.Rotation","page":"Signed distance functions","title":"SimpleDistMesh.sdf.Rotation","text":"Rotation(ϕ, p0)\n\nRotation about point p0 counter-clockwise by angle ϕ (in radians)\n\nExamples\n\nRotate point about the origin by π/2\n\njulia> rot = Rotation(π/2)\n(::Rotation) (generic function with 1 method)\njulia> rot([1.0, 0.0])\n2-element Vector{Float64}:\n 6.123233995736766e-17\n 1.0\n\n\n\n\n\n","category":"type"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.SignedDistFunc","page":"Signed distance functions","title":"SimpleDistMesh.sdf.SignedDistFunc","text":"SignedDistFunc\n\nAbstract type for all signed distance functions\n\n\n\n\n\n","category":"type"},{"location":"signed_distance_functions/#Base.intersect-Tuple{Function, Function}","page":"Signed distance functions","title":"Base.intersect","text":"intersect(f, g) returns the intersection of the f and g regions for signed distance functions\n\n\n\n\n\n","category":"method"},{"location":"signed_distance_functions/#Base.setdiff-Tuple{Function, Function}","page":"Signed distance functions","title":"Base.setdiff","text":"setdiff(f, g) returns the region of f with g removed for signed distance functions\n\n\n\n\n\n","category":"method"},{"location":"signed_distance_functions/#Base.union-Tuple{Function, Function}","page":"Signed distance functions","title":"Base.union","text":"union(f, g) returns the union of the regions for signed distance functions \n\n\n\n\n\n","category":"method"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.distance-Tuple{SimpleDistMesh.sdf.Polygon, AbstractVector}","page":"Signed distance functions","title":"SimpleDistMesh.sdf.distance","text":"distance(poly, x)\n\nReturn the minimal 2-norm distance from x to the edges of the polygon poly\n\n\n\n\n\n","category":"method"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.triangle_area-Tuple{Any, Any, Any}","page":"Signed distance functions","title":"SimpleDistMesh.sdf.triangle_area","text":"triangle_area(a, b, c)\n\nReturn the signed area of the 2D triangle abc\n\n\n\n\n\n","category":"method"},{"location":"signed_distance_functions/#SimpleDistMesh.sdf.winding_number-Tuple{SimpleDistMesh.sdf.Polygon, AbstractVector}","page":"Signed distance functions","title":"SimpleDistMesh.sdf.winding_number","text":"winding_number(poly, x)\n\nReturn the winding number of polygon poly about point x\n\n\n\n\n\n","category":"method"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Pages=[\"meshing.md\"]","category":"page"},{"location":"meshing/#Signed-distance-functions","page":"Meshing","title":"Signed distance functions","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"SimpleDistMesh","category":"page"},{"location":"meshing/#SimpleDistMesh","page":"Meshing","title":"SimpleDistMesh","text":"SimpleDistMesh\n\nMesh generation using signed distance functions\n\n\n\n\n\n","category":"module"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Modules=[SimpleDistMesh]\nOrder=[:type, :function]","category":"page"},{"location":"meshing/#SimpleDistMesh.Mesh","page":"Meshing","title":"SimpleDistMesh.Mesh","text":"Mesh\n\nMesh with node positions and triangulation ts\n\nThe columns of the nodes matrix provide  the positions of points in the mesh,  while the triangles (or tetrahedra) of the mesh defined by the columns of ts.\n\nExamples\n\nA mesh in 2D comprised of the single triangle (0, 0), (1, 0), (1, 1)\n\njulia> mesh = Mesh{Float64, 2}(             [                  0.0 1.0 0.0                 0.0 0.0 1.0             ],             [1; 2; 3]         )\n\n\n\n\n\n","category":"type"},{"location":"meshing/#SimpleDistMesh.Mesh-Tuple{Function, Function, Real, Any}","page":"Meshing","title":"SimpleDistMesh.Mesh","text":"Mesh(d, h, h0, bounds, fixed_nodes; ...)\n\nConstruct a mesh using the signed distance function d and desired edge length function h. \n\nThe initial edge length is given by h0 and the mesh is constructed within the  bounding box given by bounds. Fixed nodes of the mesh can be provided as  columns of fixed_nodes.\n\nArguments\n\nd::Function signed distance function (== 0 on the boundary)\nh::Function preferred edge length function\nh0 starting edge length\nbounds::Matrix defines bounding box for mesh with columns defining the    minimum and maximum for each axis. For example,   bounds = [x_min y_min; x_max y_max]\n\nKeyword Arguments\n\nFscale internal pressure of relaxation method\nfixed_nodes::Matrix defines fixed points of the mesh (if any)\nΔt time-step of Euler method for point relaxation\ngeps tolerance in geometry calculations\ndptol stopping criterion for relaxation method. Terminate if all node    advections move less than dptol.\nttol for computational efficiency, triangulations are not computed at every   step of the mesh relaxation. Recompute the mesh triangulation if a point has   moved by at least ttol since last triangulation.\nmax_iters maximum number of iterations\n\nOutputs\n\nReturns a Mesh\n\n\n\n\n\n","category":"method"},{"location":"meshing/#SimpleDistMesh.find_bars-Tuple{Any, Any, Any}","page":"Meshing","title":"SimpleDistMesh.find_bars","text":"find_bars(d, geps, nodes)\n\nReturn the bars which connect the nodes of the mesh using Delaunay  triangulation and geometrical tolerance geps. The bars are defined by the  columns the returned matrix.\n\n\n\n\n\n","category":"method"},{"location":"meshing/#SimpleDistMesh.grid_uniform_triangles-Tuple{Any, Any}","page":"Meshing","title":"SimpleDistMesh.grid_uniform_triangles","text":"grid_uniform_triangles(bounds, h0)\n\nReturn nodes of a uniform grid of equilaterial triangles with side-length h0.  Nodes are returned as a vector of vectors.\n\n\n\n\n\n","category":"method"},{"location":"meshing/#SimpleDistMesh.rejection_method-NTuple{4, Any}","page":"Meshing","title":"SimpleDistMesh.rejection_method","text":"rejection_method(d, h, nodes)\n\nReturn subject of nodes inside the domain which pass the rejection method\n\n\n\n\n\n","category":"method"},{"location":"meshing/#SimpleDistMesh.relax_mesh!-Union{Tuple{T}, Tuple{Matrix{T}, Any}} where T<:Real","page":"Meshing","title":"SimpleDistMesh.relax_mesh!","text":"relax_mesh!(nodes, ts; ...)\n\nPerform one relaxation iteration on the nodes and mesh triangulation `ts and return the maximum distance moved by an iterior node.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleDistMesh.jl","page":"Home","title":"SimpleDistMesh.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia implementation of DistMesh, a simple signed distance function meshing algorithm developed by Per-Olof Persson.","category":"page"},{"location":"","page":"Home","title":"Home","text":"One motivation for the DistMesh algorithm is to provide a simple meshing algorithm, easily understood and modified by newcomers. Given the importance of mesh generation across a broad range of discplines, \"the ability to understand and adapt mesh generation code is too valuable an option to lose.\" Thus, whilst the algorithm is still capable of producing high quality meshes, performance is sacrificed for clarity. [1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here we provide a Julia port of the original MATLAB implementation. Changes have been made only to simplify the presentation of the ideas. Obviously, these choices are subjective, but we hope this code can still be of use to the community.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1] Persson, P. O., & Strang, G. (2004). A simple mesh generator in MATLAB. SIAM review, 46(2), 329-345.","category":"page"}]
}
